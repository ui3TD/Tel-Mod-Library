<Project>
	<PropertyGroup>
		<ModOutputDirRelease>$(APPDATA)\..\LocalLow\Glitch Pitch\Idol Manager\Mods</ModOutputDirRelease>
		<ModOutputDirDebug>$(SolutionDir)\..\Mods</ModOutputDirDebug>
		<dllDir>$(SolutionDir)\..\dll</dllDir>

		<!--Other assembly info-->
		<Description>Idol Manager Mod</Description>

		<!--C# and .NET version-->
		<LangVersion>latest</LangVersion>
		<TargetFramework>net46</TargetFramework>
	</PropertyGroup>

	<ItemGroup>
		<Reference Include="Assembly-CSharp" private="false">
			<HintPath>$(dllDir)\Assembly-CSharp.dll</HintPath>
		</Reference>
		<Reference Include="Assembly-CSharp-firstpass" private="false">
			<HintPath>$(dllDir)\Assembly-CSharp-firstpass.dll</HintPath>
		</Reference>
		<Reference Include="Harmony" private="false">
			<HintPath>$(dllDir)\0Harmony.dll</HintPath>
		</Reference>
		<Reference Include="UnityEngine.UI" private="false">
			<HintPath>$(dllDir)\UnityEngine.UI.dll</HintPath>
		</Reference>
		<Reference Include="Unity.TextMeshPro" private="false">
			<HintPath>$(dllDir)\Unity.TextMeshPro.dll</HintPath>
		</Reference>
		<Reference Include="DOTween" private="false">
			<HintPath>$(dllDir)\DOTween.dll</HintPath>
		</Reference>
	</ItemGroup>

	<PropertyGroup Condition="'$(Configuration)' == 'Debug'">
		<ModOutputDir>$(ModOutputDirDebug)</ModOutputDir>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)' == 'Release'">
		<ModOutputDir>$(ModOutputDirRelease)</ModOutputDir>
	</PropertyGroup>

	<Target Name="CleanModOutputDir" BeforeTargets="Clean">
		<RemoveDir Directories="$(ModOutputDir)/$(ModName)" Condition="Exists('$(ModOutputDir)/$(ModName)')" />
	</Target>
	

	<Target Name="PostBuild" AfterTargets="Build">
		<MakeDir Directories="$(ModOutputDir)\$(ModName)" Condition="!Exists('$(ModOutputDir)\$(ModName)')" />
		<Exec Command='copy /Y "$(TargetDir)$(AssemblyName).dll" "$(ModOutputDir)\$(ModName)\$(AssemblyName).dll"' />
		<Exec Command='xcopy /Y /E /I "assets" "$(ModOutputDir)\$(ModName)"' />
	</Target>

	<!--Create the mod's info.json file by calling the -->
	<Target Name="CreateInfoFile" AfterTargets="Build">
		<CreateInfoJSON
			OutputFilePath="$(ModOutputDir)\$(ModName)\info.json"
			ModName="$(ModName)"
			AssemblyName="$(AssemblyName)"
			ModDescription="$(ModDescription)"
			Version="$(Version)"
			Authors="$(Authors)"
			Tags="$(Tags)"
			JSONLoadOrder="$(JSONLoadOrder)" />
	</Target>

	<!--Task to create the info.json file-->
	<UsingTask TaskName="CreateInfoJSON" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<OutputFilePath ParameterType="System.String" Required="true" />
			<ModName ParameterType="System.String" Required="true" />
			<AssemblyName ParameterType="System.String" Required="true" />
			<ModDescription ParameterType="System.String" Required="true" />
			<Version ParameterType="System.String" Required="true" />
			<Authors ParameterType="System.String" Required="true" />
			<Tags ParameterType="System.String" Required="true" />
			<JSONLoadOrder ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Using Namespace="System.IO"/>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
var content = $@"{{
	""Title"": ""{ModName}"",
	""Description"": ""{ModDescription}"",
	""Authors"": ""{Authors}"",
	""Version"": ""{Version}"",
	""Tags"": {Tags},
	""JSONLoadOrder"": {JSONLoadOrder},
	""HarmonyID"": ""{AssemblyName}""
}}";

File.WriteAllText(OutputFilePath, content);
				]]>
			</Code>
		</Task>
	</UsingTask>

</Project>
